openapi: 3.0.0
info:
      title: MyGame-V1
      description: a board game build base on NestJs and NextJs
      contact:
            name: Pham Vinh Nhan
            email: heaty566@gmail.com
      license:
            name: Apache 2.0
            url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
      version: 0.0.1
tags:
      - name: auth
        description: handle authentication
      - name: user
        description: service for user
      - name: admin
        description: 'service for administrator, have to login and with role is ADMIN'
      - name: common
        description: service for basic request
      - name: tic-tac-toe
        description: Service tic-tac-toe game
      - name: chat
        description: Service chat box
servers:
      - url: 'http://localhost:4000'
        description: Development server
paths:
      /api/auth/login:
            post:
                  tags:
                        - auth
                  description: >-
                        Registered users can login to establish their identity with the
                        application using the API below. The login operation requires two
                        properties: username and password.
                  requestBody:
                        $ref: '#/components/requestBodies/LoginUserDto'
                  responses:
                        '200':
                              $ref: '#/components/responses/reTokenKey'
                        '400':
                              $ref: '#/components/responses/400'
      /api/auth/logout:
            post:
                  tags:
                        - auth
                  description: The Logout operation terminates user session.
                  parameters:
                        - $ref: '#/components/parameters/token'
                  responses:
                        '200':
                              description: Access token removed successfully
                              content:
                                    application/json:
                                          schema:
                                                $ref: '#/components/schemas/CommonApiResponse'
                        '401':
                              $ref: '#/components/responses/401'
      /api/auth/register:
            post:
                  tags:
                        - auth
                  description: >-
                        The register API can be used to create user accounts in the application.
                        A registration request must provide a user object as a collection of
                        key/value properties.
                  requestBody:
                        $ref: '#/components/requestBodies/RegisterUserDto'
                  responses:
                        '200':
                              $ref: '#/components/responses/reTokenKey'
                        '400':
                              $ref: '#/components/responses/400'
      /api/auth/otp-email:
            post:
                  tags:
                        - auth
                  description: >-
                        Create an email is sent with a link to a webpage which contains a form
                        where the user can enter the new password.
                  requestBody:
                        $ref: '#/components/requestBodies/UpdateEmailDto'
                  responses:
                        '200':
                              description: The mail has been sent successfully.
                              content:
                                    application/json:
                                          schema:
                                                $ref: '#/components/schemas/CommonApiResponse'
                        '400':
                              $ref: '#/components/responses/400'
                        '500':
                              $ref: '#/components/responses/500'
      /api/support:
            post:
                  tags:
                        - common
                  description: The support API allows users to send their problem to our support team.
                  requestBody:
                        $ref: '#/components/requestBodies/AboutUsDto'
                  responses:
                        '200':
                              $ref: '#/components/responses/reTokenKey'
                        '400':
                              $ref: '#/components/responses/400'
      /api/auth/otp-sms:
            post:
                  tags:
                        - auth
                  description: >-
                        Create an OTP code is sent to the user phone number. Users can use it to
                        access a webpage which contains a form where the user can enter the new
                        password.
                  requestBody:
                        $ref: '#/components/requestBodies/OtpSmsDTO'
                  responses:
                        '200':
                              description: The OTP code has been sent successfully.
                              content:
                                    application/json:
                                          schema:
                                                $ref: '#/components/schemas/CommonApiResponse'
                        '400':
                              $ref: '#/components/responses/400'
                        '500':
                              $ref: '#/components/responses/500'
      /api/auth/check-otp:
            post:
                  tags:
                        - auth
                  description: Check-otp API is user to check a OTP code is exist or not.
                  parameters:
                        - $ref: '#/components/parameters/OTPkey'
                  responses:
                        '200':
                              description: OTP code is existed.
                              content:
                                    application/json:
                                          schema:
                                                $ref: '#/components/schemas/CommonApiResponse'
                        '403':
                              $ref: '#/components/responses/403'
      /api/auth/google:
            get:
                  tags:
                        - auth
                  description: >-
                        Mychess integrates with Google to support user authentication and login
                        into a Mychess application with a Google account.
                  responses:
                        '200':
                              $ref: '#/components/responses/reTokenKey'
      /api/auth/github:
            get:
                  tags:
                        - auth
                  description: >-
                        Mychess integrates with Github to support user authentication and login
                        into a Mychess application with a Github account.
                  responses:
                        '200':
                              $ref: '#/components/responses/reTokenKey'
      /api/auth/facebook:
            get:
                  tags:
                        - auth
                  description: >-
                        Mychess integrates with Facebook to support user authentication and
                        login into a Mychess application with a Facebook account.
                  responses:
                        '200':
                              $ref: '#/components/responses/reTokenKey'
      /api/auth/socket-token:
            get:
                  tags:
                        - auth
                  description: Create an io cookie and return it to clients.
                  parameters:
                        - $ref: '#/components/parameters/token'
                  responses:
                        '200':
                              description: The server creates io cookie successfully.
                              content:
                                    application/json:
                                          schema:
                                                $ref: '#/components/schemas/CommonApiResponse'
                        '401':
                              $ref: '#/components/responses/401'

components:
      responses:
            '400':
                  description: invalid body input
                  content:
                        application/json:
                              schema:
                                    $ref: '#/components/schemas/CommonApiResponse'
            '401':
                  description: user has not a re-token
                  content:
                        application/json:
                              schema:
                                    $ref: '#/components/schemas/CommonApiResponse'
            '403':
                  description: user has to be an administrator
                  content:
                        application/json:
                              schema:
                                    $ref: '#/components/schemas/CommonApiResponse'
            '404':
                  description: entity does not exist in database
                  content:
                        application/json:
                              schema:
                                    $ref: '#/components/schemas/CommonApiResponse'
            '500':
                  description: some went wrong( 3rd shutdown or server errors)
                  content:
                        application/json:
                              schema:
                                    $ref: '#/components/schemas/CommonApiResponse'
            reTokenKey:
                  description: re-token key
                  content:
                        header:
                              schema:
                                    type: string
                                    example: >-
                                          eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
      schemas:
            CommonApiResponse:
                  type: object
                  properties:
                        data:
                              type: object
                              description: it type any base on your api
                        details:
                              type: object
                              properties:
                                    field:
                                          type: string
                                          description: field will be the name of invalid field
                                          example: should not be empty
                                    message:
                                          type: string
                                          example: this is an error message
                                    errorMessage:
                                          type: string
                                          example: this is an error message
            UserEntity:
                  type: object
                  properties:
                        username:
                              type: string
                              example: username
                        name:
                              type: string
                              example: my name
                        password:
                              type: string
                              example: my password
                        _id:
                              type: string
                              example: 1321r3121421421res
                        avatarUrl:
                              type: string
                              example: /user/2132132132/hello.png
                        googleId:
                              type: string
                              example: '1232142142'
                        facebookId:
                              type: string
                              example: '1232142142'
                        githubId:
                              type: string
                              example: '1232142142'
                        createDate:
                              type: string
                              example: 10/20/2000
                        elo:
                              type: integer
                              example: 1000
                        isDisabled:
                              type: string
                              example: username
                        email:
                              type: string
                              example: username
                        phoneNumber:
                              type: string
                              example: username
      requestBodies:
            UpdateBasicUserDto:
                  content:
                        application/json:
                              schema:
                                    type: object
                                    properties:
                                          name:
                                                type: string
                                                example: who am i
                  description: user basic information is not include some sensitive fields
                  required: true
            UpdateAvatarDto:
                  description: put avatar image here
                  content:
                        form-data:
                              schema:
                                    type: object
                                    properties:
                                          avatar:
                                                type: string
                                                example: /hello.png
                  required: true
            OtpSmsDTO:
                  description: provide phone number to send an otp key
                  content:
                        form-data:
                              schema:
                                    type: object
                                    properties:
                                          phoneNumber:
                                                type: string
                                                example: '+20401230312'
                  required: true
            ResetPasswordDTO:
                  description: provide new password to reset password
                  content:
                        form-data:
                              schema:
                                    type: object
                                    properties:
                                          newPassword:
                                                type: string
                                                example: 123abcAbc
                                          confirmNewPassword:
                                                type: string
                                                example: 123abcAbc
                  required: true
            ChangePasswordDTO:
                  description: provide new password and current password to change password by user
                  content:
                        form-data:
                              schema:
                                    type: object
                                    properties:
                                          newPassword:
                                                type: string
                                                example: 123abcAbc
                                          confirmNewPassword:
                                                type: string
                                                example: 123abcAbc
                                          currentPassword:
                                                type: string
                                                example: 1234abcAbc
                  required: true
            UpdateEmailDto:
                  description: provide an email to send an otp key
                  content:
                        form-data:
                              schema:
                                    type: object
                                    properties:
                                          phoneNumber:
                                                type: string
                                                example: hello@gmail.com
                  required: true
            AboutUsDto:
                  description: basic user information
                  content:
                        form-data:
                              schema:
                                    type: object
                                    properties:
                                          email:
                                                type: string
                                                example: hello@gmail.com
                                          name:
                                                type: string
                                                example: pham vinh nhan
                                          message:
                                                type: string
                                                example: hello world
                  required: true
            LoginUserDto:
                  description: login user information
                  content:
                        form-data:
                              schema:
                                    type: object
                                    properties:
                                          username:
                                                type: string
                                                example: username
                                          password:
                                                type: string
                                                example: password
                  required: true
            RoomIdDto:
                  description: provide roomId
                  content:
                        form-data:
                              schema:
                                    type: object
                                    properties:
                                          roomId:
                                                type: string
                                                example: '123124215421'
                  required: true
            AddMoveTTTDto:
                  description: provide roomId and x y for please tic-tac-toe
                  content:
                        form-data:
                              schema:
                                    type: object
                                    properties:
                                          roomId:
                                                type: string
                                                example: '123124215421'
                                          x:
                                                type: number
                                                example: 1
                                          'y':
                                                type: number
                                                example: 1
                  required: true
            RegisterUserDto:
                  description: register user information
                  content:
                        form-data:
                              schema:
                                    type: object
                                    properties:
                                          name:
                                                type: string
                                                example: my name
                                          username:
                                                type: string
                                                example: username
                                          password:
                                                type: string
                                                example: password
                                          confirmPassword:
                                                type: string
                                                example: password
                  required: true
            RoomIdChatDTO:
                  description: give server the chat room you want to join
                  content:
                        form-data:
                              schema:
                                    type: object
                                    properties:
                                          chatId:
                                                type: string
                                                example: '123124215421'
                  required: true
            SendMessageDTO:
                  description: add new message to chat room
                  content:
                        form-data:
                              schema:
                                    type: object
                                    properties:
                                          chatId:
                                                type: string
                                                example: '123124215421'
                                          content:
                                                type: string
                                                example: hello world
                  required: true
      parameters:
            token:
                  name: token
                  in: cookie
                  required: true
                  style: form
                  schema:
                        type: object
                        properties:
                              re-token:
                                    type: string
                                    example: >-
                                          eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                              auth-token:
                                    type: string
                                    example: >-
                                          eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
            userId:
                  name: id
                  description: user id
                  in: query
                  required: true
                  style: form
                  schema:
                        type: string
                        example: 123456789aa
            OTPkey:
                  name: key
                  description: otp key
                  in: query
                  required: true
                  style: form
                  schema:
                        type: string
                        example: 123456789aa
            searchUser:
                  name: searchUserQuery
                  in: query
                  required: true
                  style: form
                  schema:
                        type: object
                        properties:
                              name:
                                    type: string
                                    example: hello world
                              currentPage:
                                    type: number
                                    example: 1
                              pageSize:
                                    type: number
                                    example: 1
